IBM test 2
=======================
Answer for Question 1
=======================
class Result {

    public static int getTripletCount(List<Integer> a, int d) {
        int tripletCount = 0;
        int n = a.size();

        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (Math.abs(a.get(j) - a.get(i)) == d && Math.abs(a.get(k) - a.get(j)) == d) {
                        tripletCount++;
                    }
                }
            }
        }

        return tripletCount;
    }
}

public class Solution {
    public static void main(String[] args) {
        // Example usage
        List<Integer> arr = List.of(1, 4, 7, 10, 13);
        int commonDifference = 3;
        int result = Result.getTripletCount(arr, commonDifference);
        System.out.println(result);  // Output: 2
    }
}
=============================================
Answer for Question 2
=============================================
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    public static List<String> triangleType(List<String> triangleToy) {
        List<String> result = new ArrayList<>();

        for (String sides : triangleToy) {
            String[] sidesArray = sides.split(" ");
            int side1 = Integer.parseInt(sidesArray[0]);
            int side2 = Integer.parseInt(sidesArray[1]);
            int side3 = Integer.parseInt(sidesArray[2]);

            if (isEquilateral(side1, side2, side3)) {
                result.add("Equilateral");
            } else if (isIsosceles(side1, side2, side3)) {
                result.add("Isosceles");
            } else {
                result.add("Scalene");
            }
        }

        return result;
    }

    private static boolean isEquilateral(int side1, int side2, int side3) {
        return side1 == side2 && side2 == side3;
    }

    private static boolean isIsosceles(int side1, int side2, int side3) {
        return side1 == side2 || side2 == side3 || side1 == side3;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int triangleToyCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> triangleToy = IntStream.range(0, triangleToyCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<String> result = Result.triangleType(triangleToy);

        bufferedWriter.write(
            result.stream()
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
